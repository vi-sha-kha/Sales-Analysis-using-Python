# -*- coding: utf-8 -*-
"""SuperStore Sales Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Ktu1Ey4ZvFw8oskJmgvq1w3wYN-WAXP
"""

#importing the libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#importing the csv files
df=pd.read_csv('/content/train.csv')
df.head()

#general overview of data

df.info()

#calculating no. of null values
null_count=df["Postal Code"].isnull().sum()
print(null_count)

#filling zero to the empty column
df["Postal Code"].fillna(0, inplace=True)

#resetting the column types into appropriate datatypes
df["Postal Code"]=df["Postal Code"].astype(int)
df.info()

df.describe()

#checking for duplicates
if df.duplicated().sum() > 0:
  print('Dulicates found')
else:
  print('No duplicates exist')

df.duplicated()

df.duplicated(keep=False).sum()

df.head(4)

#types of customers
types_of_customers=df['Segment'].unique()
print(types_of_customers)

#no. of customers in each segment
number_of_customers=df['Segment'].value_counts().reset_index()
number_of_customers=number_of_customers.rename(columns={'index':'Customer Type', 'Segment':'Total Customers'})
print(number_of_customers)

#Plotting a pie chart
plt.pie(number_of_customers['Total Customers'], labels=number_of_customers['Customer Type'], autopct='%1.2f%%')

plt.title('Distribution of Customers')
plt.show()

#Customer and sales

sales_per_category=df.groupby('Segment')['Sales'].sum().reset_index()
sales_per_category=sales_per_category.rename(columns={'Segment':'Customer Type', 'Sales': 'Total Sales'})
print(sales_per_category)

#plotting
plt.pie(sales_per_category['Total Sales'], labels=sales_per_category['Customer Type'], autopct='%1.2f%%')

plt.title('Sales per Customer Category')
plt.show()

#Bar Graph

plt.bar(sales_per_category['Customer Type'], sales_per_category['Total Sales'])
plt.title('Sales per Customer Category')
plt.xlabel('Customer Type')
plt.ylabel('Total Sales')
plt.show()

#Customer Loyalty
df.head()

#Grouping data according to Customer id, Customer Name, Segment and calculate the freq. of their orders

customer_order_freq=df.groupby(['Customer ID', 'Customer Name', 'Segment'])['Order ID'].count().reset_index()

customer_order_freq.rename(columns={'Order ID': 'Order Count'}, inplace=True)

print(customer_order_freq)

#find the repating customer orders
repetitive_customers=customer_order_freq[customer_order_freq['Order Count']>1]
print(repetitive_customers)

#sort the repeating/frequent customer orders in descending order
sorted_frequent_customers=repetitive_customers.sort_values(by='Order Count', ascending=False)

print(sorted_frequent_customers)

print(sorted_frequent_customers.head(10))

print(sorted_frequent_customers.head(10).reset_index(drop=True))

#Ranking Customers on the basis of Sales

customer_sales=df.groupby(['Customer ID', 'Customer Name', 'Segment'])['Sales'].sum().reset_index()

#Sorting in descending order

top_spenders=customer_sales.sort_values(by='Sales', ascending=False)

print(top_spenders.head().reset_index(drop=True))

##Mode of Shipping
df.head()

#sorting unique values in the ship mode column into a new series
shipping_mode=df['Ship Mode'].unique()
print(shipping_mode)

#frequency of different shipping modes
shipping_freq=df['Ship Mode'].value_counts().reset_index()
shipping_freq.rename(columns={'index': 'Mode of Shipment', 'Ship Mode': 'Frequency of ship mode'}, inplace=True)
print(shipping_freq)

#Plotting a pie chart

plt.pie(shipping_freq['Frequency of ship mode'], labels=shipping_freq['Mode of Shipment'], autopct='%1.1f%%')

plt.title('Representation of Shipping mode Frequency')

plt.show()

##Geographical Analysis of Customers by state

state=df['State'].value_counts().reset_index()
state.rename(columns={'index': 'State', 'State': 'Customer_count'}, inplace=True)
print(state.head(10))

#Customers by city
city=df['City'].value_counts().reset_index()
city.rename(columns={'index': 'City', 'City': 'Customer_count'}, inplace=True)
print(city.head(10))

#Sales per state
state_sales=df.groupby(['State'])['Sales'].sum().reset_index()

top_sales=state_sales.sort_values(by='Sales', ascending=False)

print(top_sales.head(10).reset_index(drop=True))

#Sales per City
city_sales=df.groupby(['City'])['Sales'].sum().reset_index()

top_sales=city_sales.sort_values(by='Sales', ascending=False)

print(top_sales.head(10).reset_index(drop=True))

##Product Category Segmentation

df.head(4)

#Types of product categories

product_category=df['Category'].unique()
print(product_category)

#group data by product category

subcategory_count=df.groupby('Category')['Sub-Category'].nunique().reset_index()

subcategory_count=subcategory_count.sort_values(by='Sub-Category', ascending=False)

print(subcategory_count.reset_index(drop=True))

#Sales per Product Category

category_sales=df.groupby('Category')['Sales'].sum().reset_index()

category_sales.sort_values(by='Sales', ascending=False, inplace=True)

print(category_sales.reset_index(drop=True))

#Plotting a pie chart
plt.pie(category_sales['Sales'], labels=category_sales['Category'], autopct='%1.2f%%')

plt.title('Sales per product category')

plt.show()

#Sales per Product

#group data by product sub-category

product_subcategory_sales=df.groupby('Sub-Category')['Sales'].sum().reset_index()

top_product_subcategory_sales=product_subcategory_sales.sort_values(by='Sales', ascending=False)

print(top_product_subcategory_sales.reset_index(drop=True))

top_product_subcategory_sales=product_subcategory_sales.sort_values(by='Sales', ascending=True)

#plotting a bar graph
plt.barh(top_product_subcategory_sales['Sub-Category'], top_product_subcategory_sales['Sales'])
plt.ylabel('Product Sub-Categories')
plt.xlabel('Total Sales')

plt.show()

#Sales Trend Analysis
#Converting Order date to datetime format

df['Order Date']=pd.to_datetime(df['Order Date'], dayfirst=True)

#grouping by year and summing the sales per year
yearly_sales=df.groupby(df['Order Date'].dt.year)['Sales'].sum().reset_index()
yearly_sales=yearly_sales.rename(columns={'Order Date':'Year', 'Sales':'Total Sales'})

print(yearly_sales)

#plotting a bar graph
plt.barh(yearly_sales['Year'], yearly_sales['Total Sales'])
plt.ylabel('Year')
plt.xlabel('Total Sales')

plt.show()

#plotting line graph

plt.plot(yearly_sales['Year'], yearly_sales['Total Sales'], marker='o', linestyle='--')

#labels
plt.title("Yearly Sales")
plt.xlabel("Year")
plt.ylabel("Total Sales")

plt.xticks(rotation=50)

plt.show()

#Quarterly Sales Trend Analysis

#convert order date to datetime format
df['Order Date']=pd.to_datetime(df['Order Date'], dayfirst=True)

#filter data according to year
year_sales=df[df['Order Date'].dt.year==2017]

#calculate the quarterly sales for year 2017
quarterly_sales=year_sales.resample('Q', on='Order Date')['Sales'].sum().reset_index()

quarterly_sales.rename(columns={'Order Date': 'Quarter', 'Sales': 'Total Sales'}, inplace=True)

#print('Quarterly sales for 2017',quarterly_sales)

print(quarterly_sales)

#plotting line graph
plt.plot(quarterly_sales['Quarter'], quarterly_sales['Total Sales'], marker='o', linestyle='--')

#labels
plt.title("Quarterly Sales")
plt.xlabel("Quarter")
plt.ylabel("Total Sales")

plt.xticks(rotation=50)

plt.show()

#Monthly Sales Trend for a particular year

#converting Order Date column to datetime format

#Filter data according to year
year_sales=df[df['Order Date'].dt.year==2018]

#calculate monthly sales for year 2018
monthly_sales=year_sales.resample('M', on='Order Date')['Sales'].sum()

monthly_sales=monthly_sales.reset_index()

monthly_sales=monthly_sales.rename(columns={'Order Date': 'Month', 'Sales': 'Monthly Sales'})
print('Monthly sales for the year 2018')
print(monthly_sales)

#plotting line chart
plt.plot(monthly_sales['Month'], monthly_sales['Monthly Sales'], marker='o')

#labels
plt.title("Monthly Sales")
plt.xlabel("Month")
plt.ylabel("Monthly Sales")

plt.show()

